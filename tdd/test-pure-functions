/**
 * Add, Remove Counter pure functions with test
 * freeze(), deepFreeze() function freeze an object. An frozen object can't be changed and mutate. As pure function requires
 * not mutating data, using freeze() in the test to make sure the object it's not mutable.
*/

/** 
 * Normal way to add a number to an array, we use .push(), but this method modifies the original array
 * use cancat() or ...
*/
const addCounter = (list) => {
  return [...list, 0];
}

const testAddCounter = () => {
  const listBefore = [];
  const listAfter = [0];
  
  deepFreeze(listBefore); 
  
  expect(addCounter(listBefore)).toEqual(listAfter);
}

/**
* don't use splice() method as it changes the array / object
*/
const removeCounter = (list, index) => {
  return [
    ...list.slice(0, index),
    ...list.slice(index + 1)
  ];
}

const testRemoveCounter = () => {
  const listBefore = [0, 10, 20];
  const listAfter = [10, 20];
  
  deepFreeze(listBefore);
  
  expect(removeCounter(listBefore, 1)).toEqual(listAfter);
}

/**
* list[index]++ is a mutation
*/
const incrememtCounter = (list, index) => {
  return [
    ...list.slice(0, index),
    ...list[index] + 1,
    ...list.slice(index + 1)
  ];
}

/**
* this function mutates the todo object, which is not pure function
*/
const toggleTodo = (todo) => {
  todo.completed != todo.completed;
  
  return todo;
}

/**
* method 1: create a new object with the copy of the original object
* but we may forget to update this code if there are new properties in todo object
*/
const toggleTodo1 = (todo) => {
 return {
   id: todo.id,
   text: todo.text,
   completed: ! todo.completed
 }
}


/**
* method 2, use ES 6 Object.assign
*/
const toggleTodo2 = (todo) => {
 return Object.assign({}, todo, {
   completed: ! todo.completed
 })
}

const testToggleTodo = () => {
  const todoBefore = {
    id: 0,
    text: 'Hello Redux',
    completed: true
  };
  
  const todoAfter = {
    id: 0,
    text: 'Hello Redux',
    completed: false
  };
  
  deepFreeze(todoBefore);
  
  expect(toggleTodo(todoBefore)).toEqual(todoAfter);
}




