/**
* todos()
*/
const todos = (state = [], action) => {
  switch(action.type) {
   case 'ADD_TODO':
      return [
        ...state,
        {
          id: action.id,
          text: action.text,
          completed: false
        }
      ];
   case 'TOGGLE_TODO':
      return state.map(todo => {
        if (todo.id !== action.id) {
          return todo;
        }
        
        return {
          ...todo,
          completed: !todo.completed
        };
      });
   default:
    return state;
  }
}

const testAddTodo = () => {
  const stateBefore = [];
  action = {
    type: 'ADD_TODO',
    id: 0,
    text: 'Hello Redux'
  };
  
  const stateAfter = {
   id: 0,
   text: 'Hello Redux',
   completed: false
  };
  
  deepFreeze(stateBefore);
  deepFreeze(action);
  
  expect(todos(stateBefore, action)).toEqual(stateAfter);
}

/**
* toggleTodo()
*/
testToggleTodo = () => {
  const stateBefore = [
    {
      id: 0,
      text: 'Redux 1',
      completed: false
    },
    {
      id: 1,
      text: 'Redux 2',
      completed: false
    }
  ];
  
  const action = {
    type: 'TOGGLE_TODO',
    id: 1
  }
  
  const stateAfter = [
    {
      id: 0,
      text: 'Redux 1',
      completed: false
    },
    {
      id: 1,
      text: 'Redux 2',
      completed: true
    }
  ];
  
  deepFreeze(stateBefore);
  deepFreeze(action);
  
  expect(todos(stateBefore, action)).toEqual(stateAfter);
}

